@page "/personal/account"

@inject ISnackbar Snackbar
@using System.Text.RegularExpressions

<MudText Class="mb-4"
         Color="Color.Primary"
         Typo="Typo.h5">
    Account
</MudText>
<MudTabs Color="Color.Transparent"
         Elevation="25"
         PanelClass="mt-6"
         Rounded="true">
<MudTabPanel Text="General">
    <MudGrid>
        <MudItem md="3"
                 sm="4"
                 xs="12">
            <MudCard Elevation="25">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Public Profile</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center mb-4">
                        <MudAvatar Image="@AvatarImageLink"
                                   Style="height:160px; width:160px;">
                            @if (AvatarImageLink == null)
                            {
                                <MudIcon Icon="@AvatarIcon"
                                         Size="Size.Large">
                                </MudIcon>
                            }
                        </MudAvatar>

                    </div>
                    <MudText Align="Align.Center">@FirstName @LastName</MudText>
                    <MudText Align="Align.Center">@JobTitle</MudText>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center">
                    <MudButton Color="@AvatarButtonColor"
                               OnClick="DeletePicture">
                        @AvatarButtonText
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem md="9"
                 sm="8"
                 xs="12">
            <MudCard Elevation="25">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Profile Details</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem md="6"
                                 xs="12">
                            <MudTextField @bind-Value="FirstName"
                                          Label="First Name"
                                          Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem md="6"
                                 xs="12">
                            <MudTextField @bind-Value="LastName"
                                          Label="First Name"
                                          Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem md="6"
                                 xs="12">
                            <MudTextField @bind-Value="JobTitle"
                                          Label="Job Title"
                                          Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem md="6"
                                 xs="12">
                            <MudTextField @bind-Value="Email"
                                          HelperText="Dont worry, we shall not spam!"
                                          InputType="InputType.Email"
                                          Label="Email"
                                          Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudText>
                                <b>Visible Only To Friends</b>
                            </MudText>
                            <MudText Typo="Typo.body2">
                                Means that only your friends will be able to see your contact details.
                            </MudText>
                            <MudSwitch @bind-Checked="@FriendSwitch"
                                       Color="Color.Secondary" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions Class="pb-4 pl-4">
                    <MudButton Class="ml-auto"
                               Color="Color.Primary"
                               @onclick="@(() => SaveChanges("Profile details saved", Severity.Success))"
                               Variant="Variant.Filled">
                        Save Changes
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudTabPanel>
<MudTabPanel Text="Notifications">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText>Notifications</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem sm="4"
                         xs="12">
                    <MudText>
                        <b>Email</b>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        What type of system notifications you want to receive to your email.
                    </MudText>
                    <div class="d-flex flex-column mt-6">
                        <MudCheckBox @bind-Checked="@NotificationEmail1"
                                     Color="Color.Primary"
                                     Label="Threat Detection">
                        </MudCheckBox>
                        <MudCheckBox @bind-Checked="@NotificationEmail2"
                                     Color="Color.Error"
                                     Label="Server Errors">
                        </MudCheckBox>
                        <MudCheckBox @bind-Checked="@NotificationEmail3"
                                     Color="Color.Warning"
                                     Label="Server Warnings">
                        </MudCheckBox>
                        <MudCheckBox @bind-Checked="@NotificationEmail4"
                                     Color="Color.Success"
                                     Label="Spam">
                        </MudCheckBox>
                    </div>
                </MudItem>
                <MudItem sm="8"
                         xs="12">
                    <MudText>
                        <b>Chat</b>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        What type of system notifications you want to receive in the phone application.
                    </MudText>
                    <div class="d-flex flex-column mt-6">
                        <MudCheckBox @bind-Checked="@NotificationChat1"
                                     Color="Color.Primary"
                                     Label="Threat Detection">
                        </MudCheckBox>
                        <MudCheckBox @bind-Checked="@NotificationChat2"
                                     Color="Color.Error"
                                     Label="Server Errors">
                        </MudCheckBox>
                        <MudCheckBox @bind-Checked="@NotificationChat3"
                                     Color="Color.Warning"
                                     Label="Server Warnings">
                        </MudCheckBox>
                        <MudCheckBox @bind-Checked="@NotificationChat4"
                                     Color="Color.Success"
                                     Label="Spam">
                        </MudCheckBox>
                    </div>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions Class="pb-4 pl-4">
            <MudButton Class="ml-auto"
                       Color="Color.Primary"
                       @onclick="@(() => SaveChanges("Notification settings saved", Severity.Success))"
                       Variant="Variant.Filled">
                Save Changes
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudTabPanel>
<MudTabPanel Text="Security">
    <MudForm @ref="_form">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>Change Password</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem md="6"
                             xs="12">
                        <MudTextField InputType="InputType.Password"
                                      Label="Password"
                                      @ref="_pwField1"
                                      Required="true"
                                      RequiredError="Password is required!"
                                      T="string"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem md="6"
                             xs="12">
                        <MudTextField InputType="InputType.Password"
                                      Label="Password Confirmation"
                                      T="string"
                                      Validation="@(new Func<string, string>(PasswordMatch))"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField InputType="InputType.Password"
                                      Label="Current Password"
                                      T="string"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions Class="pb-4 pl-4">
                <MudButton Class="ml-auto"
                           Color="Color.Primary"
                           @onclick="@(() => SaveChanges("Current Password is incorrect", Severity.Error))"
                           Variant="Variant.Filled">
                    Change Password
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudForm>
</MudTabPanel>
</MudTabs>

@code {
    private string AvatarImageLink { get; set; } = "https://res.cloudinary.com/tgproimagecloud/image/upload/v1638705794/TGProV3/users/admin_avatar.jpg";
    private string? AvatarIcon { get; set; }
    private string AvatarButtonText { get; set; } = "Delete Picture";
    private Color AvatarButtonColor { get; set; } = Color.Error;
    private string FirstName { get; set; } = "Thuong";
    private string LastName { get; set; } = "Vo";
    private string JobTitle { get; set; } = "Web Owner";
    private string Email { get; set; } = "trungthuongvo109@gmail.com";
    private bool FriendSwitch { get; set; } = true;
    private bool NotificationEmail1 { get; set; } = true;
    private bool NotificationEmail2 { get; set; }
    private bool NotificationEmail3 { get; set; }
    private bool NotificationEmail4 { get; set; } = true;
    private bool NotificationChat1 { get; set; }
    private bool NotificationChat2 { get; set; } = true;
    private bool NotificationChat3 { get; set; } = true;
    private bool NotificationChat4 { get; set; }

    void DeletePicture()
    {
        if (string.IsNullOrEmpty(AvatarImageLink)) return;

        AvatarImageLink = string.Empty;
        AvatarIcon = Icons.Material.Outlined.SentimentVeryDissatisfied;
        AvatarButtonText = "Upload Picture";
        AvatarButtonColor = Color.Primary;
    }

    void SaveChanges(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config => { config.ShowCloseIcon = false; });
    }

    private MudForm? _form;
    private MudTextField<string>? _pwField1;

    private static IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";

            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (_pwField1 is null)
        {
            return string.Empty;
        }

        return _pwField1.Value != arg ? "Passwords don't match" : string.Empty;
    }
}
